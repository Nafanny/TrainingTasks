package com.nafanny.tasks;

/*
    В Java существует два типа данных: "Примитивные типы" и "Ссылочные типы".
 */

public class DataType {

    // В Java всего 8 примитивных типов данных, они подразделяются на 4 группы.

    // Целочисленные.
    byte by;        // Может хранить значения от -128 до 127;
    short sh;       // Может хранить значения от -32768 до 32767;
    int in;     // Может хранить значения от -2_147_483_648 до 2_147_483_647;
    long lon;       // Может хранить значения от -2^63 до 2^63 -1;

    // Дробные.
    float fl;       // Может хранить значения от -3.4Е+38 до 3.4Е+38 и 7 знаков после точки.
    double db;      // Может хранить значения от -1.7Е+308 до 1.7Е+308 и 16 знаков после точки.

    // Символьные.
    char ch;        // Может хранить значения от '\u0000' = int 0 до '\uffff' = int 65535.

    // Логические.
    boolean bool;   // Может хранить только одно из двух значений: true или false.

 /*
    К ссылочным типам данных относятся все классы (class), интерфейсы (interface), массивы (Array),
        и переменные типов (Type Variables), а также ссылочный тип (null).
 */

    // Самым используемым типом ссылочных данных является (String).
     String str;
     class TestClass{}      // Все классы.
     interface TestInterface{}  // Все интерфейсы.
     int[] array = new int[1];  // Массив может быть любым из примитивов. Рассмотрим все варианты в классе (Arrays).

    // Переменная типа вводится путем объявления параметра типа универсального класса, интерфейса, метода или конструктора.

    class TestExe extends TestClass{    // Здесь мы указываем в качестве параметра класса, его наследование от другого класса.
        int n = 0;
        String s = "Hello!";

        public TestExe(int n, String s){    // Здесь создаём конструктор с параметрами.
            this.n = n;
            this.s = s;
        }
    }

    class TestImpl implements TestInterface{}   // Здесь мы используем имплементацию, она позволяет использовать интерфейс.
    interface TestInter extends TestInterface{}     // Здесь наш интерфейс наследуется от класса.
    public void testMethod (int n, String str) {}   // Создаём метод с параметрами.

}
 /*
        В других классах нашего проекта реализуем зависимости между типами данных, их создание, взаимодействие и прочее.
 */